import { useState, useEffect } from 'react';
import { AIContext, AIInsight } from '../../types/ai-agent';
import { Sparkles, ThumbsUp, ThumbsDown, RefreshCw } from 'lucide-react';

interface AIInsightCardProps {
  context: AIContext;
}

export function AIInsightCard({ context }: AIInsightCardProps) {
  const [insight, setInsight] = useState<AIInsight | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [feedback, setFeedback] = useState<'positive' | 'negative' | null>(null);

  const fetchInsight = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/ai-agent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'getWeeklyInsight',
          context
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get insight');
      }

      const data = await response.json();
      setInsight(data.insight);
    } catch (err) {
      setError('Unable to get insight. Please try again.');
      console.error('Error fetching insight:', err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchInsight();
  }, [context]);

  const handleFeedback = (type: 'positive' | 'negative') => {
    setFeedback(type);
    // Here you could send feedback to your backend
    console.log(`User provided ${type} feedback for insight:`, insight?.id);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Sparkles className="w-5 h-5 text-purple-500" />
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            AI Weekly Insight
          </h2>
        </div>
        <button
          onClick={fetchInsight}
          disabled={isLoading}
          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 disabled:opacity-50"
        >
          <RefreshCw className={`w-5 h-5 ${isLoading ? 'animate-spin' : ''}`} />
        </button>
      </div>

      {isLoading ? (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-2 text-gray-600 dark:text-gray-400">Generating insight...</p>
        </div>
      ) : error ? (
        <div className="text-center py-8">
          <p className="text-red-500">{error}</p>
          <button
            onClick={fetchInsight}
            className="mt-2 text-purple-600 hover:text-purple-700"
          >
            Try Again
          </button>
        </div>
      ) : insight ? (
        <>
          <div className="prose dark:prose-invert max-w-none">
            <p className="text-gray-700 dark:text-gray-300">{insight.content}</p>
          </div>

          <div className="mt-6 grid grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {insight.metrics.tasksCompleted}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Tasks Completed
              </div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {insight.metrics.habitsMaintained}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Habits Maintained
              </div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {Math.round(insight.metrics.goalsProgress * 100)}%
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">
                Goals Progress
              </div>
            </div>
          </div>

          <div className="mt-6 flex items-center justify-between">
            <div className="text-xs text-gray-500 dark:text-gray-400">
              Generated by AI using your recent activity. Your data is never shared externally.
            </div>
            {!feedback && (
              <div className="flex gap-2">
                <button
                  onClick={() => handleFeedback('positive')}
                  className="p-2 text-gray-500 hover:text-green-600 dark:text-gray-400 dark:hover:text-green-500"
                >
                  <ThumbsUp className="w-5 h-5" />
                </button>
                <button
                  onClick={() => handleFeedback('negative')}
                  className="p-2 text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-500"
                >
                  <ThumbsDown className="w-5 h-5" />
                </button>
              </div>
            )}
          </div>
        </>
      ) : null}
    </div>
  );
} 